events {
    worker_connections 1024;
}

http {
    upstream nest_backend {
        server nest:3000;
    }

    upstream mediamtx_webrtc {
        server mediamtx:8889;
    }

    upstream mediamtx_hls {
        server mediamtx:8888;
    }

    server {
        listen 80;
        server_name localhost;

        # Increase body size for large video uploads if needed
        client_max_body_size 100M;

        # Proxy timeouts for long-polling or streaming
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;

        # Root application (NestJS serves React static files)
        location / {
            proxy_pass http://nest_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://nest_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebRTC endpoint (MediaMTX)
        location /webrtc/ {
            proxy_pass http://mediamtx_webrtc/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # HLS endpoint (MediaMTX)
        location /hls/ {
            proxy_pass http://mediamtx_hls/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;

            # CORS headers for HLS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
