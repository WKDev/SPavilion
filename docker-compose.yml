
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: uhBscN4gshrqiwJc
      POSTGRES_DB: s_pavilion
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d s_pavilion"]
      interval: 10s
      timeout: 5s
      retries: 5

    profiles:
      - mock
      - hardware
    networks:
      - s-pavilion-network
    restart: unless-stopped

  nest:
    image: node:22-alpine
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://admin:uhBscN4gshrqiwJc@postgres:5432/s_pavilion
      PLC_PORT: /dev/ttyUSB0
      PLC_BAUD_RATE: 9600
      NODE_ENV: development
      TZ: Asia/Seoul
      # Mock environment variables
      MOCK_MODE: ${MOCK_MODE:-true}  # Changed default to false for hardware access
      MOCK_MODBUS_HOST: mock-modbus
      MOCK_MODBUS_PORT: 502
      # Platform detection
      PLATFORM: ${PLATFORM:-linux}  # linux or windows
    ports:
      - "3000:3000"
    # Serial port device mapping for both Linux and Windows
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # PLC serial port (Linux)
      - /dev/ttyUSB1:/dev/ttyUSB1  # Additional serial port (Linux)
      - /dev/ttyACM0:/dev/ttyACM0  # Arduino/other serial devices (Linux)
      - /dev/ttyACM1:/dev/ttyACM1  # Additional Arduino devices (Linux)
    privileged: true  # Required for serial port access
    depends_on:
      postgres:
        condition: service_healthy
      mock-modbus:
        condition: service_started
    profiles:
      - default
      - hardware  # New profile for hardware access
      - mock  # Mock environment profile
    volumes:
      - ./nest:/app  # Mount nest folder for live development
      - /app/node_modules  # Anonymous volume for node_modules
      - ./next/dist:/app/public  # Serve next build
      # Windows-specific volumes (will be ignored on Linux)
      - /dev/bus/usb:/dev/bus/usb  # USB device access
    networks:
      - s-pavilion-network
    restart: unless-stopped
    command: sh -c "npm install && npm run start:dev"

  # MediaMTX RTSP to WebRTC/HLS converter
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    environment:
      TZ: Asia/Seoul
    ports:
      - "9554:8554"  # RTSP (using 9554 on host to avoid Windows port conflicts)
      - "8889:8889"  # WebRTC
      - "8887:8890"  # HLS (changed from 8888 to 8887 to avoid Windows port conflict)
      - "8189:8189/udp"  # WebRTC UDP

    profiles:
      - default
      - mock
    volumes:
      - ./mediamtx/mediamtx.yml:/mediamtx.yml:ro
    networks:
      - s-pavilion-network
    restart: unless-stopped

  # YOLOv8 Detection Service
  detection-service:
    build:
      context: ./detection-service
      dockerfile: Dockerfile
    container_name: detection-service
    working_dir: /app
    environment:
      API_URL: http://nest:3000 # NestJS API URL (backend)
      RTSP_URL: rtsp://mediamtx:8554/camera # MediaMTX RTSP URL to ingest video stream
      CAMERA_INDEX: ${CAMERA_INDEX:-0}  # Allow override for Windows webcam
      CELL_SIZE: 16
      TZ: Asia/Seoul
      # Mock environment variables
      MOCK_MODE: ${MOCK_MODE:-true}  # Changed default to false for hardware access
      USE_GSTREAMER: ${USE_GSTREAMER:-false}
      USE_DETECTION: ${USE_DETECTION:-true}  # Enable YOLOv8 detection
      MOCK_VIDEO_FILE: /app/test-video.mp4
      # Platform detection
      PLATFORM: ${PLATFORM:-linux}  # linux or windows
      # GPU settings (for NVIDIA GPU)
      NVIDIA_VISIBLE_DEVICES: ${NVIDIA_VISIBLE_DEVICES:-all}
      NVIDIA_DRIVER_CAPABILITIES: ${NVIDIA_DRIVER_CAPABILITIES:-compute,utility}
    # Hardware device mapping for Linux only (Windows doesn't use /dev/video*)
    devices:
      - /dev/video0:/dev/video0  # UVC camera (Linux only)
      - /dev/video1:/dev/video1  # Additional camera (Linux only)
    privileged: true  # Required for camera and serial port access
    depends_on:
      - mediamtx
    profiles:
      - default
      - mock
      - hardware  # New profile for hardware access
    volumes:
      - ./detection-service:/app  # Mount detection-service folder for live development
      - /app/__pycache__  # Anonymous volume for Python cache
      # GPU access
      - /dev/dri:/dev/dri  # GPU access for Linux
      # Windows-specific volumes (will be ignored on Linux) 
      - /dev/bus/usb:/dev/bus/usb  # USB device access
    networks:
      - s-pavilion-network
    restart: unless-stopped
    command: python -u main.py  # Use hot reload for development
    # GPU runtime for NVIDIA GPUs
    # runtime: nvidia
    # stop logs
    logging:
      driver: none

  # Nginx Reverse Proxy (Optional)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: s-pavilion-nginx
    ports:
      - "80:80"
    depends_on:
      - nest
      - mediamtx
    networks:
      - s-pavilion-network
    restart: unless-stopped
    profiles:
      - with-nginx  # Only start with: docker-compose --profile with-nginx up

  # next Development Server (Development Only)
  next-dev:
    image: node:22-alpine
    container_name: next-dev
    working_dir: /app
    ports:
      - "3001:3001"
    volumes:
      - ./next:/app  # Mount next folder for live development
      - /app/node_modules  # Anonymous volume for node_modules

    environment:
      - WEBRTC_URL=http://localhost:8889
    networks:
      - s-pavilion-network
    profiles:
      - development  # Only start with: docker-compose --profile development up
      - mock
    restart: unless-stopped
    command: sh -c "yarn install && yarn dev -p 3001 -H 0.0.0.0"

  # Mock Modbus Server (Mock Environment Only)
  mock-modbus:
    build:
      context: ./mock-modbus
      dockerfile: Dockerfile
    container_name: mock-modbus
    ports:
      - "502:502"  # Modbus TCP port
    environment:
      TZ: Asia/Seoul
    networks:
      - s-pavilion-network
    profiles:
      - mock  # Only start with: docker-compose --profile mock up
    restart: unless-stopped
    command: python main.py


volumes:
  postgres:
    driver: local

networks:
  s-pavilion-network:
    driver: bridge
