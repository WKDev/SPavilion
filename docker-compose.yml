
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - ./postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d s_pavilion"]
      interval: 10s
      timeout: 5s
      retries: 5

    profiles:
      - mock
    networks:
      - s-pavilion-network
    restart: unless-stopped

  nest:
    image: node:22-alpine
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://admin:changeme@postgres:5432/s_pavilion
      PLC_PORT: /dev/ttyUSB0
      PLC_BAUD_RATE: 9600
      NODE_ENV: development
      TZ: Asia/Seoul
      # Mock environment variables
      MOCK_MODE: ${MOCK_MODE:-false}
      MOCK_MODBUS_HOST: mock-modbus
      MOCK_MODBUS_PORT: 502
    ports:
      - "3000:3000"
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # PLC serial port (only in non-mock mode)
    privileged: true  # Required for serial port access
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - default
    volumes:
      - ./nest:/app  # Mount nest folder for live development
      - /app/node_modules  # Anonymous volume for node_modules
      - ./react/dist:/app/public  # Serve React build
    networks:
      - s-pavilion-network
    restart: unless-stopped
    command: sh -c "npm install && npm run start:dev"

  # MediaMTX RTSP to WebRTC/HLS converter
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    environment:
      TZ: Asia/Seoul
    ports:
      - "8554:8554"  # RTSP
      - "8889:8889"  # WebRTC
      - "8888:8888"  # HLS
      - "8189:8189/udp"  # WebRTC UDP

    profiles:
      - default
      - mock
    volumes:
      - ./mediamtx/mediamtx.yml:/mediamtx.yml:ro
    networks:
      - s-pavilion-network
    restart: unless-stopped

  # YOLOv8 Detection Service
  detection-service:
    build:
      context: ./detection-service
      dockerfile: Dockerfile
    container_name: detection-service
    working_dir: /app
    environment:
      API_URL: http://nest:3000 # NestJS API URL (backend)
      RTSP_URL: rtsp://mediamtx:8554/camera # MediaMTX RTSP URL to ingest video stream
      CAMERA_INDEX: 0
      CELL_SIZE: 16
      TZ: Asia/Seoul
      # Mock environment variables
      MOCK_MODE: ${MOCK_MODE:-true}
      MOCK_VIDEO_FILE: /app/test-video.mp4
    devices:
      - /dev/video0:/dev/video0  # UVC camera (only in non-mock mode)
    privileged: true  # Required for camera access
    depends_on:
      - mediamtx
    profiles:
      - default
      - mock
    volumes:
      - ./detection-service:/app  # Mount detection-service folder for live development
      - /app/__pycache__  # Anonymous volume for Python cache

    networks:
      - s-pavilion-network
    restart: unless-stopped
    command: python -u main.py  # Use hot reload for development

  # Nginx Reverse Proxy (Optional)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: s-pavilion-nginx
    ports:
      - "80:80"
    depends_on:
      - nest
      - mediamtx
    networks:
      - s-pavilion-network
    restart: unless-stopped
    profiles:
      - with-nginx  # Only start with: docker-compose --profile with-nginx up

  # React Development Server (Development Only)
  react-dev:
    image: node:22-alpine
    container_name: react-dev
    working_dir: /app

    ports:
      - "3001:3001"
    volumes:
      - ./react:/app  # Mount React folder for live development
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - s-pavilion-network
    profiles:
      - development  # Only start with: docker-compose --profile development up
      - mock
    restart: unless-stopped
    command: sh -c "yarn dev --host 0.0.0.0"


volumes:
  postgres:
    driver: local

networks:
  s-pavilion-network:
    driver: bridge
